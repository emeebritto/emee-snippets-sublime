{
  "scope": [
    "source.cs"
  ],
  "completions": [
    {
      "trigger": "Console.WriteLine(any)\tC#",
      "contents": "Console.WriteLine($1)"
    },{
      "trigger": "Console.ReadLine(any)\tC#",
      "contents": "Console.ReadLine($1)"
    },{
      "trigger": "string\tC#",
      "contents": "string"
    },{
      "trigger": "int\tC#",
      "contents": "int"
    },{
      "trigger": "char\tC#",
      "contents": "char"
    },{
      "trigger": "float\tC#",
      "contents": "float"
    },{
      "trigger": "bool\tC#",
      "contents": "bool"
    },{
      "trigger": "var.string\tC#",
      "contents": "string ${1:name} = \"$2\";"
    },{
      "trigger": "var.int\tC#",
      "contents": "int ${1:name} = $2;"
    },{
      "trigger": "var.char\tC#",
      "contents": "char ${1:name} = '$2';"
    },{
      "trigger": "var.double\tC#",
      "contents": "double ${1:name} = $2;"
    },{
      "trigger": "var.float\tC#",
      "contents": "float ${1:name} = $2;"
    },{
      "trigger": "var.bool\tC#",
      "contents": "bool ${1:name} = ${2:false};"
    },{
      "trigger": "string.Length\tC#",
      "contents": "$1.Length"
    },{
      "trigger": "string.ToUpper()\tC#",
      "contents": "$1.ToUpper()"
    },{
      "trigger": "string.ToLower()\tC#",
      "contents": "$1.ToLower()"
    },{
      "trigger": "string.Contains(string) -> bool\tC#",
      "contents": "$1.Contains($2)"
    },{
      "trigger": "string.IndexOf(string) -> int\tC#",
      "contents": "$1.IndexOf($2)"
    },{
      "trigger": "Math.Abs(num) -> num\tC#",
      "contents": "Math.Abs($1)"
    },{
      "trigger": "Math.Pow(num, num) -> num\tC#",
      "contents": "Math.Pow($1, $2)"
    },{
      "trigger": "Math.Sqrt(num) -> num\tC#",
      "contents": "Math.Sqrt($1)"
    },{
      "trigger": "Math.Max(num, num) -> num\tC#",
      "contents": "Math.Max($1, $2)"
    },{
      "trigger": "Math.Min(num, num) -> num\tC#",
      "contents": "Math.Min($1, $2)"
    },{
      "trigger": "Math.Round(float) -> num\tC#",
      "contents": "Math.Round($1)"
    },{
      "trigger": "Console.Write(any)\tC#",
      "contents": "Console.Write($1)"
    },{
      "trigger": "Convert.ToInt32(any) -> int\tC#",
      "contents": "Convert.ToInt32($1)"
    },{
      "trigger": "Convert.ToDouble(any) -> double\tC#",
      "contents": "Convert.ToDouble($1)"
    },{
      "trigger": "new.string\tC#",
      "contents": "new string$1"
    },{
      "trigger": "new.int\tC#",
      "contents": "new int$1"
    },{
      "trigger": "new.float\tC#",
      "contents": "new float$1"
    },{
      "trigger": "new.bool\tC#",
      "contents": "new bool$1"
    },{
      "trigger": "new.limited.array\tC#",
      "contents": "new ${1:type}[${2:limit}]"
    },{
      "trigger": "array\tC#",
      "contents": "{ $1, $2 }"
    },{
      "trigger": "static\tC#",
      "contents": "static"
    },{
      "trigger": "void\tC#",
      "contents": "void"
    },{
      "trigger": "method\tC#",
      "contents": "${1:static }${2:void} ${3:name}($4)\n{\n\t$5\n}"
    },{
      "trigger": "params\tC#",
      "contents": "${1:string} ${2:name}"
    },{
      "trigger": "concat\tC#",
      "contents": "\" + ${1:varName} + \""
    },{
      "trigger": "return\tC#",
      "contents": "return"
    },{
      "trigger": "if\tC#",
      "contents": "if ($1) {\n\t$2\n}"
    },{
      "trigger": "else\tC#",
      "contents": "else {\n\t$1\n}"
    },{
      "trigger": "else.if\tC#",
      "contents": "else if {\n\t$1\n}"
    },{
      "trigger": "if.else\tC#",
      "contents": "if ($1) {\n\t$2\n} else {\n\t$3\n}"
    },{
      "trigger": "switch\tC#",
      "contents": "switch ($1) {\n\tcase ${2:0}:\n\t\t$3\n\t\tbreak;\n\tcase ${4:1}:\n\t\t$5\n\t\tbreak;$6\n}"
    },{
      "trigger": "case\tC#",
      "contents": "case ${2:0}:\n\t$3\n\tbreak;\n"
    },{
      "trigger": "default\tC#",
      "contents": "default:\n\t$3\n\tbreak;\n"
    },{
      "trigger": "while\tC#",
      "contents": "while (${1:condition}) {\n\t$2\n}"
    },{
      "trigger": "break\tC#",
      "contents": "break;"
    },{
      "trigger": "do.while\tC#",
      "contents": "do {\n\t$1\n} while (${2:condition});"
    },{
      "trigger": "for\tC#",
      "contents": "for (int i = ${1:0}; i ${2:<= 5}; ${3:i++}) {\n\t$2\n}"
    },{
      "trigger": "try\tC#",
      "contents": "try {\n\t$1\n}"
    },{
      "trigger": "try.catch\tC#",
      "contents": "try {\n\t$1\n} catch(${2:Exception e}) {\n\t$3\n}"
    },{
      "trigger": "try.catch.finally\tC#",
      "contents": "try {\n\t$1\n} catch(${2:Exception e}) {\n\t$3\n} finally {\n\t$4\n}"
    },{
      "trigger": "catch\tC#",
      "contents": "catch(${1:Exception e}) {\n\t$2\n}"
    },{
      "trigger": "finally\tC#",
      "contents": "finally {\n\t$1\n}"
    },{
      "trigger": "exception.Message\tC#",
      "contents": "${1:e}.Message"
    },{
      "trigger": "DivideByZeroException\tC#",
      "contents": "DivideByZeroException"
    },{
      "trigger": "FormatException\tC#",
      "contents": "FormatException"
    },{
      "trigger": "Exception\tC#",
      "contents": "Exception"
    },{
      "trigger": "Class\tC#",
      "contents": "Class ${1:Nexa} {\n\t$2\n}"
    },{
      "trigger": "namespace\tC#",
      "contents": "namespace ${1:Nexa} {\n\t$2\n}"
    },{
      "trigger": "using\tC#",
      "contents": "using ${1:Nexa};"
    },{
      "trigger": "using.System.Text\tC#",
      "contents": "using System.Text;"
    },{
      "trigger": "using.System.Threading.Tasks\tC#",
      "contents": "using System.Threading.Tasks;"
    },{
      "trigger": "using.System\tC#",
      "contents": "using System;"
    },{
      "trigger": "using.System.Linq\tC#",
      "contents": "using System.Linq;"
    },{
      "trigger": "using.System.Collections.Generic\tC#",
      "contents": "using System.Collections.Generic;"
    }
  ]
}