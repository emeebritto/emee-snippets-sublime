{
  "scope": "source.python",
  "completions": [
    {
      "trigger": "assert\tpython",
      "contents": "assert ${1:isinstance(x, int)}, ${2:'message error'}"
    },{
      "trigger": "import.doctest\tpython",
      "contents": "import doctest)"
    },{
      "trigger": "doctest.testmod(verbose=True)\tpython",
      "contents": "doctest.testmod(${1:verbose=True})"
    },{
      "trigger": "ifmain.doctest\tpython",
      "contents": "if __name__ == \"__main__\":\n\timport doctest\n\tdoctest.testmod(${1:verbose=True})"
    },{
      "trigger": "doctest\tpython",
      "contents": "\"\"\"${1:title function}\n>>> ${2:function}(${3:params})\n${4:expected_return}\n\"\"\""
    },{
      "trigger": "NewType\tpython.typing",
      "contents": "NewType('${1:var_name}', ${2:type})"
    },{
      "trigger": "from.typing.import.*\tpython.typing",
      "contents": "from typing import ${1:*}"
    },{
      "trigger": "import.List\tpython.typing",
      "contents": "from typing import List"
    },{
      "trigger": "import.NewType\tpython.typing",
      "contents": "from typing import NewType"
    },{
      "trigger": "List[type]\tpython.typing",
      "contents": "List[${1:int}]"
    },{
      "trigger": "List.Union\tpython.typing",
      "contents": "List[Union[${1:int}]]"
    },{
      "trigger": "import.Union\tpython.typing",
      "contents": "from typing import Union"
    },{
      "trigger": "import.Tuple\tpython.typing",
      "contents": "from typing import Tuple"
    },{
      "trigger": "import.Dict\tpython.typing",
      "contents": "from typing import Dict"
    },{
      "trigger": "Tuple[types]\tpython.typing",
      "contents": "Tuple[$1]"
    },{
      "trigger": "Dict[key_type, value_type]\tpython.typing",
      "contents": "Dict[${1:key_type}, ${2:value_type}]"
    },{
      "trigger": "Callable[[params_type], return_type]\tpython.typing",
      "contents": "Callable[[$1], ${2:None}]"
    },{
      "trigger": "Sequence[sequence_type]\tpython.typing",
      "contents": "Sequence[${1:int}]"
    },{
      "trigger": "Iterable[sequence_type]\tpython.typing",
      "contents": "Sequence[${1:int}]"
    },{
      "trigger": "def.decorator.singleton\tpython",
      "contents": "def singleton(the_class):\n\tinstances = {}\n\tdef get_class(*args, **kwargs):\n\t\tif the_class not in instances:\n\t\t\tinstances[the_class] = the_class(*args, **kwargs)\n\t\treturn instances[the_class]\n\treturn get_class"
    },{
      "trigger": "def.decorator\tpython",
      "contents": "def ${1:name}(func):\n\tdef ${2:function}(*args, **kwargs):\n\t\treturn func(*args, **kwargs)\n\treturn ${2:function}"
    },{
      "trigger": "metaclass.singleton\tpython",
      "contents": "class Singleton(type):\n\t_instances = {}\n\n\tdef __call__(cls, *args, **kwargs):\n\t\tif cls not in cls._instances:\n\t\t\tcls._instances[cls] = super().__call__(*args, **kwargs)\n\t\treturn cls._instances[cls]"
    },{
      "trigger": "metaclass\tpython",
      "contents": "class ${1:Meta}(type):\n\tdef __new__(mcs, name, bases, namespace):${2}\n\t\treturn type.__new__(mcs, name, bases, namespace)"
    },{
      "trigger": "import.annotations\tpython.__future__",
      "contents": "from __future__ import annotations"
    },{
      "trigger": "import.flask\tpython.flask",
      "contents": "from flask import Flask"
    },{
      "trigger": "app = Flask(__name__)\tpython.flask",
      "contents": "${1:app} = Flask(__name__)"
    },{
      "trigger": "render_template(html_file)\tpython.flask",
      "contents": "render_template(${1:home.html})",
      "details": "html from folder 'template'"
    },{
      "trigger": "app.run()\tpython.flask",
      "contents": "${1:app}.run($2)"
    },{
      "trigger": "app.run(debug=True)\tpython.flask",
      "contents": "${1:app}.run(debug=True)"
    },{
      "trigger": "app.route(path)\tpython.flask",
      "contents": "@${1:app}.route('/$2')\ndef ${3:function}():\n\t${4:pass}"
    },{
      "trigger": "app.route(dinamic_path)\tpython.flask",
      "contents": "@${1:app}.route('/<${2:id}>')\ndef ${3:function}(${2:params}$4):\n\t${5:pass}"
    },{
      "trigger": "match.case\tpython",
      "contents": "match ${1:value}:\n\tcase $2:\n\t\t$3\n\tcase $4:\n\t\t$5"
    },{
      "trigger": "case.guard\tpython",
      "contents": "case $1 if ${2:condition}:\n\t$3"
    }
  ]
}
