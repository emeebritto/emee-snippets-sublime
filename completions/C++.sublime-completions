{
  "scope": "source.c++",
  "completions": [
    {
      "trigger": "include <iostream>\tC++",
      "contents": "#include <iostream>"
    },{
      "trigger": "include <string>\tC++",
      "contents": "#include <string>"
    },{
      "trigger": "include <vector>\tC++",
      "contents": "#include <vector>"
    },{
      "trigger": "include <array>\tC++",
      "contents": "#include <array>"
    },{
      "trigger": "include <cstdlib>\tC++",
      "contents": "#include <cstdlib>"
    },{
      "trigger": "include <cmath>\tC++",
      "contents": "#include <cmath>"
    },{
      "trigger": "include <tchar.h>\tC++",
      "contents": "#include <tchar.h>"
    },{
      "trigger": "include <ctime>\tC++",
      "contents": "#include <ctime>"
    },{
      "trigger": "include <io.h>\tC++",
      "contents": "#include <io.h>"
    },{
      "trigger": "include <fcntl.h>\tC++",
      "contents": "#include <fcntl.h>"
    },{
      "trigger": "include <iomanip>\tC++",
      "contents": "#include <iomanip>"
    },{
      "trigger": "using namespace std;\tC++",
      "contents": "using namespace std;"
    },{
      "trigger": "_tsetlocale(LC_ALL, _T(\"portuguese\"));\tC++",
      "contents": "_tsetlocale(LC_ALL, _T(\"${1:portuguese}\"));"
    },{
      "trigger": "_setmode(_fileno(stdout), _O_U16TEXT);\tC++",
      "contents": "_setmode(_fileno(stdout), _O_U16TEXT);"
    },{
      "trigger": "function\tC++",
      "contents": "${3:void} ${1:function_name}()\n{\n\t${2:cout << \"My Function :3\";}\n}"
    },{
      "trigger": "cout\tC++",
      "contents": "cout << $1;"
    },{
      "trigger": "std::wcout\tC++",
      "contents": "std::wcout << $1;"
    },{
      "trigger": "wcout\tC++",
      "contents": "wcout << $1;"
    },{
      "trigger": "std::cout\tC++",
      "contents": "std::cout << $1;"
    },{
      "trigger": "cin\tC++",
      "contents": "cin >> $1;"
    },{
      "trigger": "std::cin\tC++",
      "contents": "std::cin >> $1;"
    },{
      "trigger": "endl\tC++",
      "contents": "<< endl"
    },{
      "trigger": "std::endl\tC++",
      "contents": "<< std::endl"
    },{
      "trigger": "system(\"pause>0\");\tC++",
      "contents": "system(\"pause>0\");"
    },{
      "trigger": "system(terminal_command);\tC++",
      "contents": "system(\"$1\");"
    },{
      "trigger": "if.else\tC++",
      "contents": "if ($1)\n{\n\t${2:cout << \"This is amazing!\";}\n}\nelse\n{\n\t${3:cout << \"So Cool!\";}\n}"
    },{
      "trigger": "else.if\tC++",
      "contents": "else if ($1)\n{\n\t${2:cout << \"So Cool!\";}\n}"
    },{
      "trigger": "ternary\tC++",
      "contents": "(${1:condition})? ${2:true} : ${3:false};"
    },{
      "trigger": "switch\tC++",
      "contents": "switch (${1:x})\n{\n\tcase ${2:1}:\n\t\t${3:cout << \"So Cool!\";}\n\t\tbreak;\n\tcase ${4:2}:\n\t\t${5:cout << \"Nice!\";}\n\t\tbreak;$6\n}"
    },{
      "trigger": "break;\tC++",
      "contents": "break;"
    },{
      "trigger": "char .. ;\tC++",
      "contents": "char $1;"
    },{
      "trigger": "wchar_t .. ;\tC++",
      "contents": "wchar_t $1;"
    },{
      "trigger": "int .. ;\tC++",
      "contents": "int $1;"
    },{
      "trigger": "int\tC++",
      "contents": "int $1"
    },{
      "trigger": "unsigned\tC++",
      "contents": "unsigned $1"
    },{
      "trigger": "short\tC++",
      "contents": "short $1"
    },{
      "trigger": "long\tC++",
      "contents": "long $1"
    },{
      "trigger": "bool .. ;\tC++",
      "contents": "bool $1;"
    },{
      "trigger": "double .. ;\tC++",
      "contents": "double $1;"
    },{
      "trigger": "float .. ;\tC++",
      "contents": "float $1;"
    },{
      "trigger": "string .. ;\tC++",
      "contents": "string $1;"
    },{
      "trigger": "bool\tC++",
      "contents": "bool $1"
    },{
      "trigger": "double\tC++",
      "contents": "double $1"
    },{
      "trigger": "float\tC++",
      "contents": "float $1"
    },{
      "trigger": "string\tC++",
      "contents": "string $1"
    },{
      "trigger": "std::string(before_space, string)\tC++",
      "contents": "std::string(${1:10}, ${2:\"Hello world\"})"
    },{
      "trigger": "const .. ;\tC++",
      "contents": "const $1;"
    },{
      "trigger": "static ..\tC++",
      "contents": "static $1",
      "details": "create static variable"
    },{
      "trigger": "while\tC++",
      "contents": "while ($1)\n{\n\t${2:cout << \"Anything\";}\n}"
    },{
      "trigger": "define\tC++",
      "contents": "#define ${1:label} ${2:value}"
    },{
      "trigger": "typedef\tC++",
      "contents": "typedef ${1:dataType} ${2:newName};"
    },{
      "trigger": "namespace\tC++",
      "contents": "namespace ${1:name}\n{\n\t${2:int x};\n\t${3:int y};\n}"
    },{
      "trigger": "sizeof(value)\tC++",
      "contents": "sizeof($1)"
    },{
      "trigger": "std::setprecision(value)\tC++",
      "contents": "std::setprecision(${1:10})"
    },{
      "trigger": "setprecision(value)\tC++",
      "contents": "setprecision(${1:10})"
    },{
      "trigger": "void *\tC++",
      "contents": "(void *)"
    },{
      "trigger": "+std::numeric_limits<x>::min()\tC++",
      "contents": "+std::numeric_limits<${1:int}>::min()"
    },{
      "trigger": "+std::numeric_limits<x>::max()\tC++",
      "contents": "+std::numeric_limits<${1:int}>::max()"
    },{
      "trigger": "setw(space_number)\tC++",
      "contents": "setw(${1:20})"
    },{
      "trigger": "do.while(space_number)\tC++",
      "contents": "do${1: }{\n\t${2:cout << \"nice loop!\";}\n} while ($3);"
    },{
      "trigger": "printf()\tC++",
      "contents": "printf($1)",
      "details": "<code>printf(\"My %s\", strTest.c_str())</code>"
    },{
      "trigger": "std::printf()\tC++",
      "contents": "std::printf($1)"
    },{
      "trigger": "str.c_str()\tC++",
      "contents": "$1c_str()"
    },{
      "trigger": "srand((unsigned)time(0));\tC++",
      "contents": "srand((unsigned)time(0));"
    },{
      "trigger": "(rand() % max) + min\tC++",
      "contents": "(rand() % ${1:35}) + ${2:1}"
    },{
      "trigger": "pragma.once\tC++",
      "contents": "#pragma once"
    },{
      "trigger": "pow(baseNumber, number)\tC++.cmath",
      "contents": "pow($1, $1)"
    },{
      "trigger": "sqrt(number)\tC++.cmath",
      "contents": "sqrt($1)"
    },{
      "trigger": "pointer\tC++",
      "contents": "${1:type} *${2:name}{ ${3:nullptr} };",
      "details": "void type = generic pointer"
    },{
      "trigger": "ref\tC++",
      "contents": "${1:type} &${2:name} = ${3:target};",
      "details": "void type = generic pointer"
    },{
      "trigger": "pointer.point\tC++",
      "contents": "${1:pointerName} = &${2:varName};"
    },{
      "trigger": "pointer.adress\tC++",
      "contents": "&${1:pointerName}"
    },{
      "trigger": "pointer.target.value.update\tC++",
      "contents": "*${1:pointerName} = ${2:value};"
    },{
      "trigger": "pointer.target.value\tC++",
      "contents": "*${1:pointerName}"
    },{
      "trigger": "pointer.value\tC++",
      "contents": "${1:pointerName}"
    },{
      "trigger": "pointer.target.cast.value\tC++",
      "contents": "*(${1:type}*)${2:pointerName}",
      "details": "if point to be void type"
    },{
      "trigger": "array\tC++",
      "contents": "${1:type} ${2:name}[${3:length}] { $4 };"
    },{
      "trigger": "array.length\tC++",
      "contents": "sizeof(${1:vetor}) / sizeof(${2:type})"
    },{
      "trigger": "std::size()\tC++",
      "contents": "std::size($1)",
      "details": "include <array>"
    },{
      "trigger": "for.each\tC++",
      "contents": "for (${3:auto} ${2:num} : ${1:nums})\n{\n\t${4:std::cout << num << std::endl;}\n}",
    },{
      "trigger": "fixed\tC++",
      "contents": "fixed",
    },{
      "trigger": "std::fixed\tC++",
      "contents": "std::fixed",
    },{
      "trigger": "std::scientific\tC++",
      "contents": "std::scientific",
    },{
      "trigger": "scientific\tC++",
      "contents": "scientific",
    },{
      "trigger": "std::defaultfloat\tC++",
      "contents": "std::defaultfloat",
    },{
      "trigger": "defaultfloat\tC++",
      "contents": "defaultfloat",
    },{
      "trigger": "std::vector\tC++",
      "contents": "std::vector<${1:var_type}> ${2:var_name};",
    },{
      "trigger": "vector\tC++",
      "contents": "vector<${1:var_type}> ${2:var_name};",
    },{
      "trigger": "vector.push_back(value)\tC++",
      "contents": "${1:vector_name}.push_back(${2:25});",
    }
  ]
}
